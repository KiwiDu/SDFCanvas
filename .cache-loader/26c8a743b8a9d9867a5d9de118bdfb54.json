{"remainingRequest":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\pack.ts","dependencies":[{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\pack.ts","mtime":1539944432294},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539950637568},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { Matrix } from '../scimath/matrix'; //class\r\nimport { Shape, Pair, Dot, Vector } from './geomath'; //fundamental shapes\r\nimport { Line, Segment, Capsule, Circle } from './shapes'; //additional shapes\r\nexport { Matrix };\r\nexport { Shape, Pair, Dot, Vector };\r\nexport { Line, Segment, Capsule, Circle };\r\nlet helper = (a, b) => {\r\n    if (typeof b == 'number') {\r\n        if (typeof a == 'number') {\r\n            return new Dot(a, b);\r\n        }\r\n        else {\r\n            return new Circle(a, b);\r\n        }\r\n    }\r\n    else {\r\n        if (a instanceof Dot) {\r\n            return new Segment(a, b);\r\n        }\r\n        else {\r\n            throw 'helper function _() cannot call upon (a : number, b: Dot)';\r\n        }\r\n    }\r\n};\r\nexport let _ = (a, b) => (helper(a, b));\r\n",{"version":3,"file":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\pack.ts","sourceRoot":"","sources":["C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\pack.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,mBAAmB,CAAA,CAAA,OAAO;AAC/C,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,MAAM,EAAC,MAAM,WAAW,CAAA,CAAA,oBAAoB;AAEnE,OAAO,EAAC,IAAI,EAAE,OAAO,EAAC,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAA,CAAA,mBAAmB;AAExE,OAAO,EAAC,MAAM,EAAC,CAAA;AACf,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,MAAM,EAAC,CAAA;AAC9B,OAAO,EAAC,IAAI,EAAE,OAAO,EAAC,OAAO,EAAC,MAAM,EAAC,CAAA;AASrC,IAAI,MAAM,GAAW,CAAC,CAAQ,EAAE,CAAQ,EAAE,EAAE;IACxC,IAAG,OAAO,CAAC,IAAI,QAAQ,EAAC;QACpB,IAAG,OAAO,CAAC,IAAI,QAAQ,EAAC;YACpB,OAAO,IAAI,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;SACtB;aAAI;YACD,OAAO,IAAI,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;SACzB;KACJ;SAAI;QACD,IAAG,CAAC,YAAY,GAAG,EAAE;YACjB,OAAO,IAAI,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;SAC1B;aAAI;YACD,MAAM,2DAA2D,CAAA;SACpE;KACJ;AACL,CAAC,CAAA;AAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAM,EAAC,CAAM,EAAE,EAAE,CAAM,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA","sourcesContent":["import {Matrix} from '../scimath/matrix'//class\r\nimport {Shape,Pair,Dot,Vector} from './geomath'//fundamental shapes\r\nimport {dotProduct,dis,dis_sqr,len,opr} from './geomath'//methods\r\nimport {Line, Segment,Capsule,Circle} from './shapes'//additional shapes\r\n\r\nexport {Matrix}\r\nexport {Shape,Pair,Dot,Vector}\r\nexport {Line, Segment,Capsule,Circle}\r\n\r\ntype flex = number | Dot\r\n\r\ntype flexout = Dot | Circle | Segment\r\ntype out = Dot & Circle & Segment\r\n\r\ntype candy = (a : flex, b : flex) => flexout\r\n\r\nlet helper : candy = (a : flex, b : flex) => {\r\n    if(typeof b == 'number'){\r\n        if(typeof a == 'number'){\r\n            return new Dot(a,b)\r\n        }else{\r\n            return new Circle(a,b)\r\n        }\r\n    }else{\r\n        if(a instanceof Dot ){\r\n            return new Segment(a,b)\r\n        }else{\r\n            throw 'helper function _() cannot call upon (a : number, b: Dot)'\r\n        }\r\n    }\r\n}\r\n\r\nexport let _ = (a:flex,b:flex) => <out>(helper(a,b))"]}]}