{"remainingRequest":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\color.ts","dependencies":[{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\color.ts","mtime":1539953893585},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539950637568},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { range } from '../scimath/utils';\r\nexport { Color, BlendMode, fill_pixel, blend_pixel };\r\nclass Color {\r\n    constructor(R, G, B) {\r\n        this.R = R;\r\n        this.G = G;\r\n        this.B = B;\r\n    }\r\n}\r\nfunction fromHex(hex) {\r\n    let reg = /#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/;\r\n    let ret = hex.match(reg);\r\n    let res = ret[0];\r\n    return res;\r\n}\r\nfunction fill_pixel(data, i, color) {\r\n    data[4 * i] = color.R;\r\n    data[4 * i + 1] = color.G;\r\n    data[4 * i + 2] = color.B;\r\n    data[4 * i + 3] = 255;\r\n}\r\nclass BlendMode {\r\n    static Normal(a, b) {\r\n        return b;\r\n    }\r\n    static Multiply(a, b) {\r\n        return a * b / 255;\r\n    }\r\n    static Screen(a, b) {\r\n        return 255 - (255 - a) * (255 - b) / 255;\r\n    }\r\n    static Overlay(a, b) {\r\n        if (a < 0.5 * 255) {\r\n            return 2 * a * b / 255;\r\n        }\r\n        else {\r\n            return 255 - 2 * (255 - a) * (255 - b) / 255;\r\n        }\r\n    }\r\n}\r\nfunction blend_pixel(data, i, color, alpha, opr) {\r\n    let op = (a, b) => range(0, 255, opr(a, b));\r\n    let c = [color.R, color.G, color.B];\r\n    for (let j = 0; j < 3; j++) {\r\n        let result = op(data[4 * i], c[j]);\r\n        data[4 * i + j] *= (1 - alpha);\r\n        data[4 * i + j] += result * alpha;\r\n    }\r\n    data[4 * i + 3] = 255;\r\n}\r\n",{"version":3,"file":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\color.ts","sourceRoot":"","sources":["C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\color.ts"],"names":[],"mappings":"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","sourcesContent":["import { range, threshold } from '../scimath/utils'\r\nexport { Color, BlendMode, ChannelData, fill_pixel, blend_pixel }\r\n\r\nclass Color {\r\n\r\n    constructor(public readonly R: number,\r\n        public readonly G: number,\r\n        public readonly B: number) { }\r\n}\r\n\r\ntype ChannelData = Uint8ClampedArray\r\ntype reduce<T> = (a: T, b: T) => T\r\n\r\nfunction fromHex(hex:string){\r\n    let reg=/#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/\r\n    let ret = hex.match(reg)\r\n    let res = ret![0]\r\n    return res\r\n}\r\n\r\nfunction fill_pixel(data: ChannelData, i: number, color: Color): void {\r\n    data[4 * i] = color.R\r\n    data[4 * i + 1] = color.G\r\n    data[4 * i + 2] = color.B\r\n    data[4 * i + 3] = 255\r\n}\r\n\r\nclass BlendMode {\r\n    static Normal(a: number, b: number) {\r\n        return b;\r\n    }\r\n\r\n    static Multiply(a: number, b: number) {\r\n        return a * b / 255\r\n    }\r\n\r\n    static Screen(a: number, b: number) {\r\n        return 255 - (255 - a) * (255 - b) / 255\r\n    }\r\n\r\n    static Overlay(a: number, b: number) {\r\n        if (a < 0.5 * 255) {\r\n            return 2 * a * b / 255\r\n        } else {\r\n            return 255 - 2 * (255 - a) * (255 - b) / 255\r\n        }\r\n    }\r\n}\r\n\r\nfunction blend_pixel(data: ChannelData, i: number, color: Color, alpha: number, opr: reduce<number>): void {\r\n    let op = (a, b) => range(0, 255, opr(a, b))\r\n    let c = [color.R, color.G, color.B]\r\n    for (let j = 0; j < 3; j++) {\r\n        let result = op(data[4 * i], c[j])\r\n        data[4 * i + j] *= (1 - alpha)\r\n        data[4 * i + j] += result * alpha\r\n    }\r\n    data[4 * i + 3] = 255\r\n}\r\n"]}]}