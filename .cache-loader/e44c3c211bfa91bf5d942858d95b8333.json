{"remainingRequest":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\shapes.ts","dependencies":[{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\shapes.ts","mtime":1539498410745},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539950637568},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { Shape, Dot, Vector } from './geomath';\r\nimport { dis, dis_sqr, dotProduct, len, opr } from './geomath';\r\nimport { AABB } from './aabb';\r\nexport { Line, Segment, Capsule, Circle };\r\n//fundamental\r\nclass Segment extends Shape {\r\n    constructor(a, b) {\r\n        super('Segment');\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    form(_b, _way) {\r\n        return new Segment(_b, Dot.toDot(opr(_b, _way, (a, b) => a + b)));\r\n    }\r\n    length() {\r\n        return dis(this.a, this.b);\r\n    }\r\n    aabb() {\r\n        return AABB.form(this.a, this.b);\r\n    }\r\n    sdf(d) {\r\n        let dis1_sqr = dis_sqr(d, this.a);\r\n        let dis2_sqr = dis_sqr(d, this.b);\r\n        let len_sqr = dis_sqr(this.a, this.b);\r\n        let cos_val = (dis1_sqr - dis2_sqr + len_sqr) * (dis2_sqr - dis1_sqr + len_sqr);\r\n        if (cos_val <= 0) {\r\n            //Dun4 jiao3 san1 jiao3 xing2\r\n            return Math.sqrt(Math.min(dis1_sqr, dis2_sqr));\r\n        }\r\n        else {\r\n            return Math.abs(Line._dd(this.a, this.b).sdf(d));\r\n        }\r\n    }\r\n}\r\nclass Line extends Shape {\r\n    constructor(A, B, C) {\r\n        super('Line');\r\n        this.A = A;\r\n        this.B = B;\r\n        this.C = C;\r\n    }\r\n    sdf(d) {\r\n        return this.takein(d) / len({ x: this.A, y: this.B });\r\n    }\r\n    takein(d) {\r\n        return this.A * d.x + this.B * d.y + this.C;\r\n    }\r\n    static _dn(d, n) {\r\n        //d : (m,n) , n : (a,b) , l : a(x-m)+b(y-n)=0\r\n        return new Line(n.x, n.y, -dotProduct(d, n));\r\n    }\r\n    static _da(d, a) {\r\n        //d : (m,n) , a : (a,b) , l : (x-m) / a = (y-n) / b\r\n        return new Line(-a.y, a.x, -dotProduct(d, a));\r\n    }\r\n    static _dd(a, b) {\r\n        return this._da(a, Vector.form(a, b));\r\n    }\r\n    static _dk(d, k) {\r\n        //d : (m,n) , k , y - n = k * ( x - m )\r\n        return this._kb(k, -k * d.y + d.x);\r\n        //equivalent : new Line(1, -k, m * k - n)\r\n    }\r\n    static _kb(k, b) {\r\n        //k , b , y = k * x + b\r\n        return new Line(1, -k, b);\r\n    }\r\n}\r\n//derivations\r\nclass Capsule extends Shape {\r\n    constructor(segment, radius) {\r\n        super('Capsule');\r\n        this.segment = segment;\r\n        this.radius = radius;\r\n    }\r\n    sdf(d) {\r\n        return this.segment.sdf(d) - this.radius;\r\n    }\r\n    aabb() {\r\n        return this.segment.aabb().expand(this.radius);\r\n    }\r\n}\r\nclass Circle extends Shape {\r\n    constructor(center, radius) {\r\n        super('Circle');\r\n        this.center = center;\r\n        this.radius = radius;\r\n    }\r\n    sdf(d) {\r\n        return this.center.sdf(d) - this.radius;\r\n    }\r\n    aabb() {\r\n        return this.center.aabb().expand(this.radius);\r\n    }\r\n}\r\n/*\r\nfunction ngon(n,r){\r\n    let pi = 3.14\r\n    return (x,y)=>{\r\n        if(n<=2)\r\n            return 1\r\n        const angle = Math.atan2(y,x);\r\n        const div = 2 * pi / n;\r\n        let i = Math.floor(angle/div)\r\n        let j = i + 0.5\r\n        const mpr = r * Math.cos(div/2)\r\n        let mp = new Dot(mpr * Math.cos(j * div), mpr * Math.sin(j * div))\r\n        let line = Line._dn(mp, Vector.toVector(mp))\r\n        return line.sdf(new Dot(x,y))\r\n    }\r\n}\r\n*/\r\n",{"version":3,"file":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\shapes.ts","sourceRoot":"","sources":["C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\geo\\shapes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Shape, Dot, Vector } from './geomath'\r\nimport { dis, dis_sqr, dotProduct, len, opr } from './geomath'\r\nimport { AABB } from './aabb';\r\nexport { Line, Segment, Capsule, Circle }\r\n\r\n//fundamental\r\nclass Segment extends Shape {\r\n    constructor(public readonly a: Dot, public readonly b: Dot) { super('Segment') }\r\n\r\n    form(_b: Dot, _way: Vector) {\r\n        return new Segment(_b, Dot.toDot(opr(_b, _way, (a, b) => a + b)))\r\n    }\r\n\r\n    length() {\r\n        return dis(this.a, this.b)\r\n    }\r\n\r\n    aabb() {\r\n        return AABB.form(this.a, this.b)\r\n    }\r\n\r\n    sdf(d: Dot) {\r\n        let dis1_sqr = dis_sqr(d, this.a)\r\n        let dis2_sqr = dis_sqr(d, this.b)\r\n        let len_sqr = dis_sqr(this.a, this.b)\r\n        let cos_val = (dis1_sqr - dis2_sqr + len_sqr) * (dis2_sqr - dis1_sqr + len_sqr)\r\n        if (cos_val <= 0) {\r\n            //Dun4 jiao3 san1 jiao3 xing2\r\n            return Math.sqrt(Math.min(dis1_sqr, dis2_sqr))\r\n        } else {\r\n            return Math.abs(Line._dd(this.a, this.b).sdf(d))\r\n        }\r\n    }\r\n}\r\n\r\nclass Line extends Shape {\r\n    constructor(public readonly A: number,\r\n        public readonly B: number,\r\n        public readonly C: number) { super('Line') }\r\n\r\n    sdf(d: Dot): number {\r\n        return this.takein(d) / len({ x: this.A, y: this.B })\r\n    }\r\n\r\n    takein(d: Dot) {\r\n        return this.A * d.x + this.B * d.y + this.C\r\n    }\r\n\r\n    static _dn(d: Dot, n: Vector): Line {\r\n        //d : (m,n) , n : (a,b) , l : a(x-m)+b(y-n)=0\r\n        return new Line(n.x, n.y, -dotProduct(d, n))\r\n    }\r\n\r\n    static _da(d: Dot, a: Vector): Line {\r\n        //d : (m,n) , a : (a,b) , l : (x-m) / a = (y-n) / b\r\n        return new Line(-a.y, a.x, -dotProduct(d, a))\r\n    }\r\n\r\n    static _dd(a: Dot, b: Dot): Line {\r\n        return this._da(a, Vector.form(a, b))\r\n    }\r\n\r\n    static _dk(d: Dot, k: number): Line {\r\n        //d : (m,n) , k , y - n = k * ( x - m )\r\n        return this._kb(k, -k * d.y + d.x)\r\n        //equivalent : new Line(1, -k, m * k - n)\r\n    }\r\n\r\n    static _kb(k: number, b: number): Line {\r\n        //k , b , y = k * x + b\r\n        return new Line(1, -k, b)\r\n    }\r\n}\r\n\r\n//derivations\r\nclass Capsule extends Shape {\r\n    constructor(public readonly segment: Segment,\r\n        public readonly radius: number) { super('Capsule') }\r\n\r\n    sdf(d: Dot) {\r\n        return this.segment.sdf(d) - this.radius\r\n    }\r\n\r\n    aabb(){\r\n        return this.segment.aabb().expand(this.radius)\r\n    }\r\n}\r\n\r\nclass Circle extends Shape {\r\n    constructor(public readonly center: Dot, public readonly radius: number) { super('Circle') }\r\n\r\n    sdf(d: Dot) {\r\n        return this.center.sdf(d) - this.radius\r\n    }\r\n\r\n    aabb(){\r\n        return this.center.aabb().expand(this.radius)\r\n    }\r\n}\r\n\r\n/*\r\nfunction ngon(n,r){\r\n    let pi = 3.14\r\n    return (x,y)=>{\r\n        if(n<=2)\r\n            return 1\r\n        const angle = Math.atan2(y,x);\r\n        const div = 2 * pi / n;\r\n        let i = Math.floor(angle/div)\r\n        let j = i + 0.5\r\n        const mpr = r * Math.cos(div/2)\r\n        let mp = new Dot(mpr * Math.cos(j * div), mpr * Math.sin(j * div))\r\n        let line = Line._dn(mp, Vector.toVector(mp))\r\n        return line.sdf(new Dot(x,y))\r\n    }\r\n}\r\n*/\r\n"]}]}