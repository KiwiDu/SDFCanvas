{"remainingRequest":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\scimath\\matrix.ts","dependencies":[{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\scimath\\matrix.ts","mtime":1539944431072},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539950637568},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["/* Unit test passed on 18/10/05\r\nlet a = Matrix.rotate(1).multiplyMatrix(Matrix.translate(0.2,-0.3))\r\n////a=Matrix.translate(10,-20)\r\nconsole.log('ori:\\n'+a)\r\n////console.log('multi&divide:\\n'+a.multiplyNumber(2)+'\\n\\n'+a.divideByNumber(2))\r\nconsole.log('inverse:\\n'+a.inverseMatrix())\r\nconsole.log('invertwice:\\n'+a.inverseMatrix().inverseMatrix())\r\nconsole.log('product:\\n'+a.multiplyMatrix(a.inverseMatrix()) )\r\n*/\r\nexport class Matrix {\r\n    constructor(a1, a2, a3, b1, b2, b3, c1, c2, n3) {\r\n        this.data = new Float64Array(9);\r\n        for (let i = 0; i < 9; i++) {\r\n            this.data[i] = arguments[i];\r\n        }\r\n    }\r\n    static make(nums) {\r\n        const vals = new Float64Array(9);\r\n        for (let i = 0; i < 9; i++) {\r\n            vals[i] = i < nums.length ? nums[i] : 0;\r\n        }\r\n        return new Matrix(vals[0], vals[1], vals[2], vals[3], vals[4], vals[5], vals[6], vals[7], vals[8]);\r\n    }\r\n    static translate(dx, dy) {\r\n        return new Matrix(1, 0, 0, 0, 1, 0, dx, dy, 1);\r\n    }\r\n    static rotate(angle) {\r\n        return new Matrix(Math.cos(angle), -Math.sin(angle), 0, Math.sin(angle), Math.cos(angle), 0, 0, 0, 1);\r\n    }\r\n    static zoom(ratio) {\r\n        return new Matrix(ratio, 0, 0, 0, ratio, 0, 0, 0, 1);\r\n    }\r\n    det /* erminant */() {\r\n        //11*22*33 + 12*23*31 + 13*21*32  -  13*22*31 - 11*23*32 - 12*21*33\r\n        return this.pos(0, 0) * this.pos(1, 1) * this.pos(2, 2)\r\n            + this.pos(0, 1) * this.pos(1, 2) * this.pos(2, 0)\r\n            + this.pos(0, 2) * this.pos(1, 0) * this.pos(2, 1)\r\n            - this.pos(0, 2) * this.pos(1, 1) * this.pos(2, 0)\r\n            - this.pos(0, 0) * this.pos(1, 2) * this.pos(2, 1)\r\n            - this.pos(0, 1) * this.pos(1, 0) * this.pos(2, 2);\r\n    }\r\n    inverseMatrix() {\r\n        console.log('det : ' + this.det());\r\n        return this.adjugateMatrix().divideByNumber(this.det());\r\n    }\r\n    transposeMatrix() {\r\n        return new Matrix(this.pos(0, 0), this.pos(1, 0), this.pos(2, 0), this.pos(0, 1), this.pos(1, 1), this.pos(2, 1), this.pos(0, 2), this.pos(1, 2), this.pos(2, 2));\r\n    }\r\n    minor(r, c) {\r\n        let result = new Float64Array(4);\r\n        let k = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            if (i == r) {\r\n                continue;\r\n            }\r\n            for (let j = 0; j < 3; j++) {\r\n                if (j == c) {\r\n                    continue;\r\n                }\r\n                result[k] = this.pos(i, j);\r\n                k++;\r\n            }\r\n        }\r\n        console.log('minor :  [ ' + result.toString() + ' ] ');\r\n        //11*22 - 12*21\r\n        //[0,1\r\n        // 2,3]\r\n        return result[0] * result[3] - result[1] * result[2];\r\n    }\r\n    cofactor(r, c) {\r\n        let sign = r + c;\r\n        return this.minor(r, c) * (sign % 2 == 1 ? -1 : 1);\r\n    }\r\n    adjugateMatrix() {\r\n        return new Matrix(this.cofactor(0, 0), this.cofactor(1, 0), this.cofactor(2, 0), this.cofactor(0, 1), this.cofactor(1, 1), this.cofactor(2, 1), this.cofactor(0, 2), this.cofactor(1, 2), this.cofactor(2, 2));\r\n    }\r\n    add(tgt) {\r\n        let result = new Float64Array(9);\r\n        for (let i = 0; i < 9; i++) {\r\n            result[i] = this.data[i] + tgt.data[i];\r\n        }\r\n    }\r\n    multiplyMatrix(tgt) {\r\n        let result = new Float64Array(9);\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                result[i * 3 + j] = Matrix.dotProduct(this.row(i), tgt.col(j));\r\n            }\r\n        }\r\n        //console.log(result.toString())\r\n        return Matrix.make(result);\r\n    }\r\n    multiplyNumber(num) {\r\n        return Matrix.make(this.data.map(ele => ele * num));\r\n    }\r\n    divideByNumber(num) {\r\n        return Matrix.make(this.data.map(ele => ele / num));\r\n    }\r\n    row(n) {\r\n        return [this.data[3 * n], this.data[3 * n + 1], this.data[3 * n + 2]];\r\n    }\r\n    col(n) {\r\n        return [this.data[n], this.data[3 + n], this.data[6 + n]];\r\n    }\r\n    pos(r, c) {\r\n        return this.data[r * 3 + c];\r\n    }\r\n    static dotProduct(a, b) {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    }\r\n    toString() {\r\n        return '[' + this.row(0) + '\\n' + this.row(1) + '\\n' + this.row(2) + ']';\r\n    }\r\n}\r\nMatrix.Unit = new Matrix(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n",{"version":3,"file":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\scimath\\matrix.ts","sourceRoot":"","sources":["C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\scimath\\matrix.ts"],"names":[],"mappings":"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","sourcesContent":["/* Unit test passed on 18/10/05\r\nlet a = Matrix.rotate(1).multiplyMatrix(Matrix.translate(0.2,-0.3))\r\n////a=Matrix.translate(10,-20)\r\nconsole.log('ori:\\n'+a)\r\n////console.log('multi&divide:\\n'+a.multiplyNumber(2)+'\\n\\n'+a.divideByNumber(2))\r\nconsole.log('inverse:\\n'+a.inverseMatrix())\r\nconsole.log('invertwice:\\n'+a.inverseMatrix().inverseMatrix())\r\nconsole.log('product:\\n'+a.multiplyMatrix(a.inverseMatrix()) )\r\n*/\r\nexport class Matrix {\r\n    data: Float64Array\r\n    static Unit: Matrix = new Matrix(\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1)\r\n    constructor(a1: number, a2: number, a3: number, b1: number, b2: number, b3: number, c1: number, c2: number, n3: number) {\r\n        this.data = new Float64Array(9)\r\n        for (let i = 0; i < 9; i++) {\r\n            this.data[i] = arguments[i]\r\n        }\r\n    }\r\n\r\n    static make(nums: Float64Array) {\r\n        const vals = new Float64Array(9)\r\n        for (let i = 0; i < 9; i++) {\r\n            vals[i] = i < nums.length ? nums[i] : 0;\r\n        }\r\n        return new Matrix(vals[0], vals[1], vals[2], vals[3], vals[4], vals[5], vals[6], vals[7], vals[8])\r\n    }\r\n\r\n    static translate(dx: number, dy: number): Matrix {\r\n        return new Matrix(1, 0, 0,\r\n            0, 1, 0,\r\n            dx, dy, 1);\r\n    }\r\n\r\n    static rotate(angle: number): Matrix {\r\n        return new Matrix(Math.cos(angle), -Math.sin(angle), 0,\r\n            Math.sin(angle), Math.cos(angle), 0,\r\n            0, 0, 1);\r\n    }\r\n\r\n    static zoom(ratio: number): Matrix {\r\n        return new Matrix(ratio, 0, 0,\r\n            0, ratio, 0,\r\n            0, 0, 1);\r\n    }\r\n\r\n    det/* erminant */(): number {\r\n        //11*22*33 + 12*23*31 + 13*21*32  -  13*22*31 - 11*23*32 - 12*21*33\r\n        return this.pos(0, 0) * this.pos(1, 1) * this.pos(2, 2)\r\n            + this.pos(0, 1) * this.pos(1, 2) * this.pos(2, 0)\r\n            + this.pos(0, 2) * this.pos(1, 0) * this.pos(2, 1)\r\n            - this.pos(0, 2) * this.pos(1, 1) * this.pos(2, 0)\r\n            - this.pos(0, 0) * this.pos(1, 2) * this.pos(2, 1)\r\n            - this.pos(0, 1) * this.pos(1, 0) * this.pos(2, 2)\r\n    }\r\n\r\n    inverseMatrix(): Matrix {\r\n        console.log('det : ' + this.det())\r\n        return this.adjugateMatrix().divideByNumber(this.det())\r\n    }\r\n\r\n    transposeMatrix(): Matrix {\r\n        return new Matrix(this.pos(0, 0), this.pos(1, 0), this.pos(2, 0),\r\n            this.pos(0, 1), this.pos(1, 1), this.pos(2, 1),\r\n            this.pos(0, 2), this.pos(1, 2), this.pos(2, 2))\r\n    }\r\n\r\n    minor(r: number, c: number): number {\r\n        let result = new Float64Array(4)\r\n        let k = 0\r\n        for (let i = 0; i < 3; i++) {\r\n            if (i == r) { continue }\r\n\r\n            for (let j = 0; j < 3; j++) {\r\n                if (j == c) { continue }\r\n\r\n                result[k] = this.pos(i, j)\r\n                k++\r\n            }\r\n        }\r\n        console.log('minor :  [ ' + result.toString() + ' ] ')\r\n        //11*22 - 12*21\r\n        //[0,1\r\n        // 2,3]\r\n        return result[0] * result[3] - result[1] * result[2]\r\n    }\r\n\r\n    cofactor(r: number, c: number) {\r\n        let sign = r + c\r\n        return this.minor(r, c) * (sign % 2 == 1 ? -1 : 1)\r\n    }\r\n\r\n\r\n    adjugateMatrix(): Matrix {\r\n        return new Matrix(this.cofactor(0, 0), this.cofactor(1, 0), this.cofactor(2, 0),\r\n            this.cofactor(0, 1), this.cofactor(1, 1), this.cofactor(2, 1),\r\n            this.cofactor(0, 2), this.cofactor(1, 2), this.cofactor(2, 2))\r\n    }\r\n\r\n    add(tgt: Matrix) {\r\n        let result = new Float64Array(9)\r\n        for (let i = 0; i < 9; i++) {\r\n            result[i] = this.data[i] + tgt.data[i]\r\n        }\r\n    }\r\n\r\n    multiplyMatrix(tgt: Matrix): Matrix {\r\n        let result = new Float64Array(9)\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                result[i * 3 + j] = Matrix.dotProduct(this.row(i), tgt.col(j))\r\n            }\r\n        }\r\n        //console.log(result.toString())\r\n        return Matrix.make(result)\r\n    }\r\n\r\n    multiplyNumber(num: number): Matrix {\r\n        return Matrix.make(this.data.map(ele => ele * num))\r\n    }\r\n\r\n    divideByNumber(num: number): Matrix {\r\n        return Matrix.make(this.data.map(ele => ele / num))\r\n    }\r\n\r\n    row(n: number): [number, number, number] {\r\n        return [this.data[3 * n], this.data[3 * n + 1], this.data[3 * n + 2]]\r\n    }\r\n\r\n    col(n: number): [number, number, number] {\r\n        return [this.data[n], this.data[3 + n], this.data[6 + n]]\r\n    }\r\n\r\n    pos(r: number, c: number) {\r\n        return this.data[r * 3 + c];\r\n    }\r\n\r\n    private static dotProduct(a: [number, number, number], b: [number, number, number]): number {\r\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n    }\r\n\r\n    toString(): string {\r\n        return '[' + this.row(0) + '\\n' + this.row(1) + '\\n' + this.row(2) + ']'\r\n    }\r\n}\r\n"]}]}