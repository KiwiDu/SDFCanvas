{"remainingRequest":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js??ref--4-2!C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\painter.ts","dependencies":[{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\painter.ts","mtime":1539959823907},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539950637568},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { _ } from '../geo/pack';\r\nimport { threshold } from '../scimath/utils';\r\nimport { Color, blend_pixel, BlendMode } from './color';\r\nexport { Coordinate };\r\nclass Coordinate {\r\n    constructor(ctx, width, height) {\r\n        this.ctx = ctx;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.axison = true;\r\n    }\r\n    //Regularize the coordinate \r\n    /*\r\n    @----------->x (0,width)\t  => \t  \t    y (-1,1)\r\n    |\t\t\t\t\t\t\t  \t    \t\t^\r\n    |\t\t\t\t\t\t\t \t \t        |\r\n    |\t\t\t\t\t\t\t\t \t\t   \t|\r\n    |\t\t\t\t\t\t\t\t \t--------@------>x (-1,1)\r\n    v\t\t\t\t\t\t\t\t \t \t    |\r\n    y (0,height)\t\t\t\t\t \t   \t\t|\r\n    */\r\n    axis() {\r\n        const [w, h] = [this.width, this.height];\r\n        this.ctx.fillStyle = '#e51c23';\r\n        this.ctx.fillRect(Math.floor(w * 0.5) - 1, 0, 2, h); //y\r\n        this.ctx.fillRect(0, Math.floor(h * 0.5) - 1, w, 2); //x\r\n        const [weight, length, step] = [1, 0.005, 20];\r\n        for (let i = 0; i <= step; i++) {\r\n            this.ctx.fillRect(Math.floor(w * (0.5 - length)), Math.floor(i * (h / step) - weight / 2), Math.floor(w * 2 * length), weight); //y\r\n            this.ctx.fillRect(Math.floor(i * (w / step) - weight / 2), Math.floor(h * (0.5 - length)), weight, Math.floor(h * 2 * length)); //x\r\n        }\r\n    }\r\n    toRelXY(absXY) {\r\n        const [absX, absY] = absXY;\r\n        return [this.toRelX(absX), this.toRelY(absY)];\r\n    }\r\n    toRelX(absX) {\r\n        const half_w = this.width * 0.5;\r\n        return (absX - half_w) / half_w;\r\n    }\r\n    toRelY(absY) {\r\n        const half_h = this.height * 0.5;\r\n        return (half_h - absY) / half_h;\r\n    }\r\n    toAbsXY(relXY) {\r\n        const [relX, relY] = relXY;\r\n        const [half_w, half_h] = [this.width * 0.5, this.height * 0.5];\r\n        return [(relX * half_w) + half_w, half_h - (half_h * relY)];\r\n    }\r\n    renderSDF(shapes) {\r\n        const [w, h] = [this.width, this.height];\r\n        let data = this.ctx.getImageData(0, 0, w, h);\r\n        let pixels = data.data;\r\n        pixels.fill(255);\r\n        for (let shape of shapes) {\r\n            console.log(shape);\r\n            let [minX, minY] = this.toAbsXY(shape.aabb().min);\r\n            let [maxX, maxY] = this.toAbsXY(shape.aabb().max);\r\n            minX = Math.floor(minX);\r\n            minY = Math.floor(minY);\r\n            maxX = Math.ceil(maxX);\r\n            maxY = Math.ceil(maxY);\r\n            let x, y;\r\n            let color = new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255);\r\n            for (let absY = maxY; absY < minY; absY++) {\r\n                y = this.toRelY(absY);\r\n                for (let absX = minX; absX < maxX; absX++) {\r\n                    x = this.toRelX(absX);\r\n                    let ret = shape.sdf(_(x, y));\r\n                    ret = 1 - threshold(-0.001, 0.001, ret); //calculate\r\n                    blend_pixel(pixels, absY * w + absX, color, ret, BlendMode.Multiply);\r\n                }\r\n            }\r\n        }\r\n        this.ctx.putImageData(data, 0, 0);\r\n        if (this.axison)\r\n            this.axis();\r\n    }\r\n}\r\n",{"version":3,"file":"C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\painter.ts","sourceRoot":"","sources":["C:\\Users\\kiwid\\Documents\\FrontendPlayground\\SDFCanvas\\ts\\canvas\\painter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,CAAC,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAS,SAAS,EAAE,MAAM,kBAAkB,CAAA;AACnD,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,SAAS,CAAA;AACvD,OAAO,EAAE,UAAU,EAAqB,CAAA;AAGxC,MAAM,UAAU;IAEZ,YAAoB,GAAc,EACd,KAAa,EACb,MAAc;QAFd,QAAG,GAAH,GAAG,CAAW;QACd,UAAK,GAAL,KAAK,CAAQ;QACb,WAAM,GAAN,MAAM,CAAQ;QAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;IAAC,CAAC;IAC1D,4BAA4B;IAC5B;;;;;;;;MAQE;IAEM,IAAI;QACR,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAExC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,SAAS,CAAA;QAC9B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA,CAAE,GAAG;QACxD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA,CAAE,GAAG;QAExD,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAA;QAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,EACrF,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,EAAE,MAAM,CAAC,CAAA,CAAE,GAAG;YAC5C,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,EACrF,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA,CAAE,GAAG;SAC/C;IACL,CAAC;IAEO,OAAO,CAAC,KAAuB;QACnC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK,CAAA;QAC1B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;IACjD,CAAC;IAEO,MAAM,CAAC,IAAY;QACvB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAA;QAC/B,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,MAAM,CAAA;IACnC,CAAC;IAEO,MAAM,CAAC,IAAY;QACvB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;QAChC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,MAAM,CAAA;IACnC,CAAC;IAEO,OAAO,CAAC,KAAuB;QACnC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,KAAK,CAAA;QAC1B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAA;QAC9D,OAAO,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,MAAM,EAAE,MAAM,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAA;IAC/D,CAAC;IAED,SAAS,CAAC,MAAe;QACrB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAExC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;QAC5C,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAA;QACtB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAChB,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;YACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAClB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAA;YACjD,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAA;YACjD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACvB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACvB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACtB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACtB,IAAI,CAAC,EAAE,CAAC,CAAA;YACR,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,GAAC,GAAG,CAAC,CAAA;YAC9E,KAAK,IAAI,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE;gBACvC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;gBACrB,KAAK,IAAI,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE;oBACvC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;oBACrB,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;oBAC5B,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA,CAAE,WAAW;oBAEpD,WAAW,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,GAAG,IAAI,EAC/B,KAAK,EAAC,GAAG,EACT,SAAS,CAAC,QAAQ,CACrB,CAAA;iBACJ;aACJ;SACJ;QACD,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;QACjC,IAAG,IAAI,CAAC,MAAM;YAAC,IAAI,CAAC,IAAI,EAAE,CAAA;IAC9B,CAAC;CACJ","sourcesContent":["import { Shape, _ } from '../geo/pack';\r\nimport { range, threshold } from '../scimath/utils'\r\nimport { Color, blend_pixel, BlendMode } from './color'\r\nexport { Coordinate, Canvas, Context2D }\r\ntype Canvas = HTMLCanvasElement\r\ntype Context2D = CanvasRenderingContext2D\r\nclass Coordinate {\r\n    axison : boolean\r\n    constructor(private ctx: Context2D,\r\n        public readonly width: number,\r\n        public readonly height: number) { this.axison = true }\r\n    //Regularize the coordinate \r\n    /*\r\n    @----------->x (0,width)\t  => \t  \t    y (-1,1)\r\n    |\t\t\t\t\t\t\t  \t    \t\t^\r\n    |\t\t\t\t\t\t\t \t \t        |\r\n    |\t\t\t\t\t\t\t\t \t\t   \t|\r\n    |\t\t\t\t\t\t\t\t \t--------@------>x (-1,1)\r\n    v\t\t\t\t\t\t\t\t \t \t    |\r\n    y (0,height)\t\t\t\t\t \t   \t\t|\r\n    */\r\n\r\n    private axis() {\r\n        const [w, h] = [this.width, this.height]\r\n\r\n        this.ctx.fillStyle = '#e51c23'\r\n        this.ctx.fillRect(Math.floor(w * 0.5) - 1, 0, 2, h)  //y\r\n        this.ctx.fillRect(0, Math.floor(h * 0.5) - 1, w, 2)  //x\r\n\r\n        const [weight, length, step] = [1, 0.005, 20]\r\n        for (let i = 0; i <= step; i++) {\r\n            this.ctx.fillRect(Math.floor(w * (0.5 - length)), Math.floor(i * (h / step) - weight / 2),\r\n                Math.floor(w * 2 * length), weight)  //y\r\n            this.ctx.fillRect(Math.floor(i * (w / step) - weight / 2), Math.floor(h * (0.5 - length)),\r\n                weight, Math.floor(h * 2 * length))  //x\r\n        }\r\n    }\r\n\r\n    private toRelXY(absXY: [number, number]): [number, number] {\r\n        const [absX, absY] = absXY\r\n        return [this.toRelX(absX), this.toRelY(absY)]\r\n    }\r\n\r\n    private toRelX(absX: number): number {\r\n        const half_w = this.width * 0.5\r\n        return (absX - half_w) / half_w\r\n    }\r\n\r\n    private toRelY(absY: number): number {\r\n        const half_h = this.height * 0.5\r\n        return (half_h - absY) / half_h\r\n    }\r\n\r\n    private toAbsXY(relXY: [number, number]): [number, number] {\r\n        const [relX, relY] = relXY\r\n        const [half_w, half_h] = [this.width * 0.5, this.height * 0.5]\r\n        return [(relX * half_w) + half_w, half_h - (half_h * relY)]\r\n    }\r\n\r\n    renderSDF(shapes: Shape[]) {\r\n        const [w, h] = [this.width, this.height]\r\n\r\n        let data = this.ctx.getImageData(0, 0, w, h)\r\n        let pixels = data.data\r\n        pixels.fill(255)\r\n        for (let shape of shapes) {\r\n            console.log(shape)\r\n            let [minX, minY] = this.toAbsXY(shape.aabb().min)\r\n            let [maxX, maxY] = this.toAbsXY(shape.aabb().max)\r\n            minX = Math.floor(minX)\r\n            minY = Math.floor(minY)\r\n            maxX = Math.ceil(maxX)\r\n            maxY = Math.ceil(maxY)\r\n            let x, y\r\n            let color = new Color(Math.random()*255, Math.random()*255, Math.random()*255)\r\n            for (let absY = maxY; absY < minY; absY++) {\r\n                y = this.toRelY(absY)\r\n                for (let absX = minX; absX < maxX; absX++) {\r\n                    x = this.toRelX(absX)\r\n                    let ret = shape.sdf(_(x, y))\r\n                    ret = 1 - threshold(-0.001, 0.001, ret)\t\t//calculate\r\n\r\n                    blend_pixel(pixels, absY * w + absX,\r\n                        color,ret,\r\n                        BlendMode.Multiply\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        this.ctx.putImageData(data, 0, 0)\r\n        if(this.axison)this.axis()\r\n    }\r\n}"]}]}